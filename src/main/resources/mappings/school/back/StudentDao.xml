<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.it313.elm.school.back.dao.StudentDao">
    
	<sql id="studentColumns">
		a.id AS "id",
		a.stu_org_id AS "stuOrgId",
		o.name as "stuOrgName",
		a.stu_name AS "stuName",
		a.stu_no AS "stuNo",
		a.stu_sex AS "stuSex",
		a.stu_age AS "stuAge",
		a.create_time AS "createTime",
		a.update_time AS "updateTime",
		a.state AS "state",
		a.remarks AS "remarks",
		a.school_org_id as "schoolOrgId"
	</sql>
	
	<sql id="studentJoins">
		inner join ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org o ON o.id = a.stu_org_id
	</sql>
    
	<select id="get" resultType="com.it313.elm.school.back.entity.Student">
		SELECT 
			<include refid="studentColumns"/>
		FROM tb_student a
			<include refid="studentJoins"/>
		WHERE a.id = #{id}
	</select>
	
	<select id="findList" resultType="com.it313.elm.school.back.entity.Student">
		SELECT 
			<include refid="studentColumns"/>
		FROM tb_student a
			<include refid="studentJoins"/>
		<where>
			1=1
			<if test="stuOrgId != null and stuOrgId!=''">
				AND EXISTS (SELECT 1 FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.SYS_ORG B WHERE o.LEFT_VALUE &gt;= B.LEFT_VALUE AND o.RIGHT_VALUE &lt;= B.RIGHT_VALUE AND B.ID=#{stuOrgId})
			</if>
			<if test="stuName != null and stuName!=''">
				AND (a.stu_name like concat('%',#{stuName},'%')
						or
					a.stu_no like concat('%',#{stuNo},'%')
					)
			</if>
		</where>
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
		${sqlMap.dsf}
	</select>

	<select id="findSchoolList" resultType="com.it313.elm.school.back.entity.Student">
		SELECT
			a.id AS "id",
			a.stu_org_id AS "stuOrgId",
			a.stu_name AS "stuName",
			a.stu_no AS "stuNo",
			a.stu_sex AS "stuSex",
			a.stu_age AS "stuAge",
			a.create_time AS "createTime",
			a.update_time AS "updateTime",
			a.state AS "state",
			a.remarks AS "remarks"
		FROM tb_student a
		<include refid="studentJoins"/>
		<where>
			AND EXISTS (SELECT 1 FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.SYS_ORG B WHERE o.LEFT_VALUE &gt;= B.LEFT_VALUE AND o.RIGHT_VALUE &lt;= B.RIGHT_VALUE AND B.ID=#{stuOrgId})
		</where>
	</select>

	<select id="findAllList" resultType="com.it313.elm.school.back.entity.Student">
		SELECT 
			<include refid="studentColumns"/>
		FROM tb_student a
			<include refid="studentJoins"/>
		<where>
			
		</where>		
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
			</otherwise>
		</choose>
	</select>
	
	<insert id="insert">
		INSERT INTO tb_student(
			id,
			stu_org_id,
			stu_name,
			stu_no,
			stu_sex,
			stu_age,
			create_time,
			update_time,
			state,
			remarks,
			school_org_id
		) VALUES (
			#{id},
			#{stuOrgId},
			#{stuName},
			#{stuNo},
			#{stuSex},
			#{stuAge},
			#{createTime},
			#{updateTime},
			#{state},
			#{remarks},
			#{schoolOrgId}
		)
	</insert>

	<insert id="batchSave">
		INSERT INTO tb_student(
			id,
			stu_org_id,
			stu_name,
			stu_no,
			stu_sex,
			stu_age,
			create_time,
			state,
			remarks,
			school_org_id
		) VALUES
		<foreach collection ="list" item="item" index= "index" separator =",">
			(
			#{item.id},
			#{item.stuOrgId},
			#{item.stuName},
			#{item.stuNo},
			#{item.stuSex},
			#{item.stuAge},
			now(),
			1,
			#{item.remarks},
			#{item.schoolOrgId}
			)
		</foreach >
	</insert>

	<update id="update">
		UPDATE tb_student 	
			<trim prefix="SET" suffixOverrides="," suffix=" where id = #{id} ">	
			<if test="stuOrgId != null and stuOrgId != ''">
				stu_org_id = #{stuOrgId},
			</if>
			<if test="stuName != null and stuName != ''">
				stu_name = #{stuName},
			</if>
			<if test="stuNo != null and stuNo != ''">
				stu_no = #{stuNo},
			</if>
			<if test="stuSex != null and stuSex != ''">
				stu_sex = #{stuSex},
			</if>
			<if test="stuAge != null and stuAge != ''">
				stu_age = #{stuAge},
			</if>
			<if test="createTime != null and createTime != ''">
				create_time = #{createTime},
			</if>
			<if test="updateTime != null and updateTime != ''">
				update_time = #{updateTime},
			</if>
			<if test="state != null and state != ''">
				state = #{state},
			</if>
			<if test="remarks != null and remarks != ''">
				remarks = #{remarks},
			</if>
			</trim>
	</update>
	
	<update id="batchDelete">
		DELETE FROM tb_student
		WHERE id in (
		<foreach collection="list" item="item" index="index" separator="," >  
	        #{item.id}
	    </foreach>  
	    )
	</update>

	<!-- tempè¡¨sql -->
	<update id="createTable">
		CREATE TABLE .tb_student_${orgId} (
		  `stu_no` varchar(30) DEFAULT null
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;
	</update>
	<insert id="batchSaveTemp">
		INSERT INTO tb_student_${orgId}(
		stu_no
		) VALUES
		<foreach collection ="list" item="item" index= "index" separator =",">
			(
			#{item.stuNo}
			)
		</foreach >
	</insert>
	<update id="dropTable">
		DROP TABLE IF EXISTS tb_student_${orgId}
	</update>

	<select id="findHasStuNo" resultType="com.it313.elm.school.back.entity.Student">
		SELECT
			b.id,a.stu_no as "stuNo"
		FROM tb_student_${orgId} a
		inner join tb_student b on a.stu_no = b.stu_no
		where b.stu_org_id=#{orgId}
	</select>

	<select id="findMulStuNo" resultType="java.lang.String">
		select stu_no as "stuNo" from
			(SELECT
				stu_no,count(1) as "num"
			FROM tb_student_${orgId} a where stu_no is not null
			group by stu_no) t
		where t.num>1
	</select>
	
</mapper>