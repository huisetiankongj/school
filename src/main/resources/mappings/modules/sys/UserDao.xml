<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.it313.big.modules.sys.dao.UserDao">
	
	<!-- <resultMap id="userResult" type="User">
		<id property="id" column="id" />
		<result property="org.id" column="org.id" />
		<result property="loginName" column="login_name" />
		<result property="password" column="password" />
		<result property="no" column="no" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="phone" column="phone" />
		<result property="mobile" column="mobile" />
		<result property="userType" column="user_type" />
		<result property="loginIp" column="login_ip" />
		<result property="loginDate" column="login_date" />
		<result property="remarks" column="remarks" />
		<result property="loginFlag" column="loginFlag" />
		<result property="photo" column="photo" />
		<result property="createBy.id" column="createBy.id" />
		<result property="createTime" column="create_time" />
		<result property="updateBy.id" column="updateBy.id" />
		<result property="updateTime" column="update_time" />
		<result property="org.name" column="org.name" />
		<result property="org.parentId" column="org.parentId" />
		<result property="org.parentIds" column="org.parentIds" />
		<result property="org.area.id" column="org.area.id" />
		<result property="org.area.name" column="org.area.name" />
		<result property="org.area.parentId" column="org.area.parentId" />
		<result property="org.area.parentIds" column="org.area.parentIds" />
		<result property="org.primaryPerson.id" column="org.primaryPerson.id" />
		<result property="org.primaryPerson.name" column="org.primaryPerson.name" />
		<result property="org.deputyPerson.id" column="org.deputyPerson.id" />
		<result property="org.deputyPerson.name" column="org.deputyPerson.name" />
		<collection property="roleList" ofType="Role">
			<id property="id" column="roleList.id" />
			<result property="org.id" column="roleList.org.id" />
			<result property="name" column="roleList.name" />
			<result property="enname" column="roleList.enname" />
			<result property="roleType" column="roleList.roleType" />
			<result property="dataScope" column="roleList.dataScope" />
			<collection property="orgList" ofType="org">
				<id property="id" column="roleList.orgList.id" />
			</collection>
		</collection>
	</resultMap> -->
	
    <sql id="userColumns">
    	a.id,
    	a.org_id AS "org.id",
    	a.login_name,
    	a.password,
    	a.no,
		a.name,
		a.email,
		a.phone,
		a.mobile,
		a.user_type,
		a.login_ip,
		a.login_date,
		a.remarks,
		a.login_flag,
		a.create_by AS "createBy.id",
		a.create_time,
		a.update_by AS "updateBy.id",
		a.update_time,
		a.del_flag,
    	o.name AS "org.name",
    	o.parent_id AS "org.parent.id"<!-- ,
    	oa.id AS "org.area.id",
    	oa.name AS "org.area.name",
    	oa.parent_id AS "org.area.parent.id",
        r.id AS "roleList.id",
        r.org_id AS "roleList.org.id",
        r.name AS "roleList.name",
        r.enname AS "roleList.enname",
        r.role_type AS "roleList.roleType",
        r.data_scope AS "roleList.dataScope" -->
    </sql>
    
    <sql id="userJoins">
		JOIN ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_org o ON o.id = a.org_id<!-- 
		LEFT JOIN ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user_role ur ON ur.user_id = a.id
        LEFT JOIN ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_role r ON r.id = ur.role_id -->
    </sql>
	
	<!-- 根据编号获得用户 -->
	<select id="get" resultType="User">
		SELECT
			<include refid="userColumns"/><!-- ,
			ro.org_id AS "roleList.orgList.id" -->
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user a
		<include refid="userJoins"/><!-- 
		LEFT JOIN ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_role_org ro ON ro.role_id = r.id -->
		WHERE a.id = #{id}
	</select>
	
	<!-- 根据登录名查询用户 -->
	<select id="getByLoginName" resultType="User" parameterType="User">
		SELECT
			<include refid="userColumns"/><!-- ,
			ro.org_id AS "roleList.orgList.id" -->
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user a
		<include refid="userJoins"/><!-- 
		LEFT JOIN sys_role_org ro ON ro.role_id = r.id -->
		WHERE a.login_name = #{loginName} AND a.del_flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<!-- 分页查询用户信息 -->
	<select id="findList" resultType="User">
		SELECT
			<include refid="userColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user a
		<include refid="userJoins"/>
		<if test="role != null and role.id != null and role.id != ''">
			JOIN ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user_role ur ON ur.user_id = a.id AND ur.role_id = #{role.id}
		</if>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		<if test="org != null and org.id != null and org.id != ''">
			AND (o.id = #{org.id} OR o.parent_ids LIKE 
					<if test="dbName == 'oracle'">'%,'||#{org.id}||',%')</if>
					<if test="dbName == 'mysql'">CONCAT('%,', #{org.id}, ',%'))</if>
		</if>
		<if test="org != null and org.leftValue != null and org.leftValue != ''">
			AND o.left_value &gt;= #{org.leftValue}
		</if>
		<if test="org != null and org.rightValue != null and org.rightValue != ''">
			AND o.right_value &lt;= #{org.rightValue}
		</if>
		<!-- 如果不是超级管理员，则不显示超级管理员用户 -->
		<if test="!currentUser.admin">
			AND a.id != '1'
		</if>
		<if test="loginName != null and loginName != ''">
			AND a.login_name like 
					<if test="dbName == 'oracle'">'%'||#{loginName}||'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{loginName}, '%')</if>
		</if>
		<if test="name != null and name != ''">
			AND a.name like 
					<if test="dbName == 'oracle'">'%'||#{name}||'%'</if>
					<if test="dbName == 'mysql'">CONCAT('%', #{name}, '%')</if>
		</if>
		<!-- 数据范围过滤 -->
		${sqlMap.dsf}
		<choose>
			<when test="page !=null and page.orderBy != null and page.orderBy != ''">
				ORDER BY ${page.orderBy}
			</when>
			<otherwise>
				ORDER BY a.name
			</otherwise>
		</choose>
	</select>
	
	<!-- 根据orgId获取用户（树查询用户时用） -->
	<select id="findUserByOrgId" resultType="User" useCache="true">
		SELECT
			a.id, a.name, a.login_name
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
			AND a.org_id = #{org.id}
		ORDER BY a.name
	</select>
	
	<!-- 查询全部用户 -->
	<select id="findAllList" resultType="User">
		SELECT
			<include refid="userColumns"/>
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user a
		<include refid="userJoins"/>
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
		ORDER BY a.name
	</select>
	
	<!-- 查询全部用户数目 -->
	<select id="findAllCount" resultType="long">
		SELECT
			COUNT(1)
		FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user a
		WHERE a.del_flag = #{DEL_FLAG_NORMAL}
	</select>
	
	<!-- 插入用户 -->
	<insert id="insert" useGeneratedKeys="true" keyProperty="id" >
		INSERT INTO ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user(
			id, 
			org_id, 
			login_name, 
			password, 
			no, 
			name, 
			email, 
			phone, 
			mobile, 
			user_type, 
			create_by, 
			create_time, 
			update_by, 
			update_time, 
			remarks, 
			login_flag, 
			del_flag
		) VALUES (
			#{id}, 
			#{org.id}, 
			#{loginName}, 
			#{password}, 
			#{no}, 
			#{name}, 
			#{email}, 
			#{phone}, 
			#{mobile}, 
			#{userType}, 
			#{createBy.id}, 
			#{createTime}, 
			#{updateBy.id}, 
			#{updateTime}, 
			#{remarks}, 
			#{loginFlag}, 
			#{delFlag}
		)
	</insert>
	
	<!-- 更新用户 -->
	<update id="update">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user SET 
			org_id = #{org.id}, 
			login_name = #{loginName}, 
			password = #{password}, 
			no = #{no}, 
			name = #{name}, 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			user_type = #{userType}, 
			update_by = #{updateBy.id}, 
			update_time = #{updateTime}, 
			remarks = #{remarks},
			login_flag = #{loginFlag}
		WHERE id = #{id}
	</update>
	
	<!-- 删除用户和角色关联表数据 -->
	<delete id="deleteUserRole">
		DELETE FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user_role WHERE user_id = #{id}
	</delete>
	
	<!-- 插入用户和角色关联表数据 -->
	<insert id="insertUserRole">
		INSERT INTO ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user_role(user_id, role_id)
		<foreach collection="roleList" item="role" separator=" union all ">
			SELECT #{id}, #{role.id} FROM ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.dual
		</foreach>
	</insert>
	
	<!-- 更新用户信息  -->
	<update id="updateUserInfo">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user SET 
			email = #{email}, 
			phone = #{phone}, 
			mobile = #{mobile}, 
			update_by = #{updateBy.id}, 
			update_time = #{updateTime}, 
			remarks = #{remarks}
		WHERE id = #{id}
	</update>
	
	<!-- 更新用户密码 -->
	<update id="updatePasswordById">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user SET 
			password = #{password} 
		WHERE id = #{id}
	</update>
	
	<!-- 更新登录信息，如登录IP、登录时间 -->
	<update id="updateLoginInfo">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user SET 
			login_ip = #{loginIp}, 
			login_Date = #{loginDate} 
		WHERE id = #{id}
	</update>
	
	<!-- 逻辑删除用户 -->
	<update id="delete">
		UPDATE ${@com.it313.big.common.persistence.BaseEntity@BIG_COMMON_TP}.sys_user SET 
			del_flag = #{DEL_FLAG_DELETE}
		WHERE id = #{id}
	</update>
	
</mapper>